'''        
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
üìå–°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
üìå–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç: ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞, ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞, ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
üìå–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
'''
import logging
import os
from collections import namedtuple
import argparse


def tree_files(path: str = os.getcwd()):
    Dir_ = namedtuple('Dirs_', 'name format root')
    File_ = namedtuple('File_', 'name format root')

    logger = logging.getLogger(__name__)
    FORMAT_MY = '{msg}'
    logging.basicConfig(filename='task_log.log',
                        filemode='a',
                        encoding='utf-8',
                        level=logging.INFO,
                        style='{',
                        format=FORMAT_MY)
    
    files = list(os.walk(path))
    for root, dirs, files in files:
        if files:
            for file in files:
                if '.' in file:
                    logging.info(msg=f'{File_(file.rsplit(".")[0], file.rsplit(".")[1], root)}')
                else:
                    logging.info(msg=f'{File_(file, "unknown", root)}')
 
        if dirs:
            for dir in dirs:
                logging.info(msg=f'{Dir_(dir, "directory", root)}')        

def create_parser():
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–µ—Ç —Å–ø—Å–∏–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —Ñ–∞–π–ª–µ "task_log.log"')
    parser.add_argument('path', type=str, nargs='*', help='–í–≤–µ–¥–∏—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—ã—Ç—å –∫ –ø–∞–ø–∫–µ')
    return parser


if __name__ == '__main__':
    parser = create_parser()
    namespace = parser.parse_args()
    
    if namespace.path:
        tree_files(*namespace.path)
    else:
        tree_files()
