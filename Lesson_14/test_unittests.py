'''
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å)
üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest (–∏–ª–∏ unittest –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
üìå –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
'''
from class_user import User
import unittest
from unittest.mock import patch


class TestUnitMy(unittest.TestCase):
    def setUp(self):
        self.first_user = User('Alex', 123, 4)
        self.second_user = User('Alex', 323, 6)


    def test_not_eq(self):
        self.assertFalse(self.first_user == self.second_user)

    def test_eq(self):
        self.assertTrue(self.first_user == User('Alex', 123, 4))

    def test_value(self):
        with self.assertRaises(ValueError):
            User('Will', 22, 12)
            User('Joe', 99, -1)

    def test_type(self):
        with self.assertRaises(TypeError):
            User(111000, 43, 2)
            User('milk_nagibator', 777, 7)
            User('Alex22.2', 22.2, 2)
            User('Will', '22', 2)



if __name__ == '__main__':
    unittest.main(verbosity=2)