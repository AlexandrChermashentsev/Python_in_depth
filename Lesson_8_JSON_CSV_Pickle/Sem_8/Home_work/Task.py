'''
–ó–∞–¥–∞–Ω–∏–µ
üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
–æ–±—Ö–æ–¥–∏—Ç –µ—ë –∏ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤
—Ñ–∞–π–ª—ã json, csv –∏ pickle.
‚óã –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
‚óã –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö, –∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–∞–∑–º–µ—Ä
—Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫–µ –∏ –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
–ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
'''

import os 
import json
import pickle
import csv

BACKSLASH_CHAR = '\\' # –ü—Ä–∏—à–ª–æ—Å—å –ø—Ä–∏–±–µ–≥–Ω—É—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–∞–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
CSV_FILE = 'Info.csv'
JSON_FILE = 'Info.json'
PICKLE_FILE = 'Info.pickle'

def create_info_file_CSV(lst: list, result_file: str = CSV_FILE):
    if os.path.exists(result_file): operation = 'a'
    else: operation = 'w'
    
    with open(result_file, operation, encoding='UTF-8') as file_csv:
        csv_writer = csv.writer(file_csv, dialect='excel', delimiter='|', lineterminator='\n')
        match operation:
            case 'a':
                csv_writer.writerows(lst)
            case 'w':
                csv_writer.writerow(['–û–±—ä–µ–∫—Ç', "–ò–º—è", "—Ä–∞–∑–º–µ—Ä"])
                csv_writer.writerows(lst)
                
                
def create_info_file_JSON(lst: list, result_file: str = JSON_FILE):
    if os.path.exists(result_file): operation = 'a'
    else: operation = 'w'
    
    with open(result_file, operation, encoding='UTF-8') as file_json:    
        for item in lst:
            dict_ = {}
            dict_[item[0]] = item[1:]
            json.dump(dict_, file_json, indent=4, ensure_ascii=False)
            
            
def create_info_file_PICKLE(lst: list, result_file: str = PICKLE_FILE):
    if os.path.exists(result_file): operation = 'ab'
    else: operation = 'wb'
    
    with open(result_file, operation) as file_pickle:
        pickle.dump(lst, file_pickle)
    

def tree_files(path: str = os.getcwd()):
    files = list(os.walk(path))
    for root, dirs, file in files:
        result = []

        # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–ø–∫–∏
        name_folder = os.path.basename(root)
        summ_elemnts = sum(os.path.getsize(os.path.join(root, obj)) for obj in file)
        print(name_folder, summ_elemnts, "- –±–∞–π—Ç")
        result.append(['–ü–∞–ø–∫–∞', name_folder, summ_elemnts])
        
        # –í—ã–≤–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
        if len(root.split(BACKSLASH_CHAR)) > 1: parent_folder = root.rsplit(BACKSLASH_CHAR)[::-1][1]
        else: parent_folder = os.getcwd().split(BACKSLASH_CHAR)[::-1][0]    
        print('parent_folder:', parent_folder)
        result.append(["–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥", parent_folder])
        
        # –í—ã–≤–æ–¥ –ø–∞–ø–æ–∫ –≤ –¥–µ—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if dirs:
            for dir_ in dirs:
                print('sub_folder:', dir_)
                result.append(['–î–æ—á–µ—Ä–Ω—è—è –ø–∞–ø–∫–∞', dir_])
        # –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if file:
            for obj in file:
                name_obj = obj
                size_obj = os.path.getsize(os.path.join(root, obj))
                print('file -', name_obj, size_obj, "- –±–∞–π—Ç")
                result.append(['–§–∞–π–ª', name_obj, size_obj])
        result.append(['-' * 50])
        print('-' * 50)
        
        create_info_file_CSV(result)
        create_info_file_JSON(result)
        create_info_file_PICKLE(result)

        
            



# tree_files('Lesson_8_JSON_CSV_Pickle')
tree_files()
